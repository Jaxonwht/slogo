# COMMANDS

forwardCommand = FORWARD {pixels} | FD {pixel}
forwardDescription = Moves turtle forward in its current heading by {pixels} distance.
forwardReturn = The value of {pixels}.

backwardCommand = BACK {pixels} | BK {pixels}
backwardDescription = Moves turtle backward in its current heading by {pixels} distance.
backwardReturn = The value of {pixels}.

leftCommand = LEFT {degrees} | LT {degrees}
leftDescription = Turns turtle counterclockwise by {degrees} angle
leftReturn  = The value of {degrees}.

rightCommand = RIGHT {degrees} | RT {degrees}
rightDescription = Turns turtle clockwise by {degrees} angle.
rightReturn = The value of {degrees}.

setHeadingCommand = SETHEADING {degrees} | SETH {degrees}
setHeadingDescription = Turns turtle to an absolute heading.
setHeadingReturn = The number of degrees moved.

towardsCommand = TOWARDS {x} {y}
towardsDescription = Turns turtle to face the point ({x}, {y}), where (0, 0) is the center of the screen.
towardsReturn = The number of degrees turtle turned.

setXYCommand = SETXY {x} {y} | GOTO {x} {y}
setXYDescription = Moves turtle to an absolute screen position, where (0, 0) is the center of the screen.
setXYReturn = The distance turtle moved.

penDownCommand = PENDOWN | PD
penDownDescription = Puts pen down such that when the turtle moves, it leaves a trail.
penDownReturn = 1

penUpCommand = PENUP | PU
penUpDescription = Puts pen up such that when the turtle moves, it does not leave a trail.
penUpReturn = 0

showTurtleCommand = SHOWTURTLE | ST
showTurtleDescription = Makes turtle visible.
showTurtleReturn = 1

hideTurtleCommand = HIDETURTLE | HT
hideTurtleDescription = Makes turtle invisible.
hideTurtleReturn = 0

homeCommand = HOME
homeDescription = Moves turtle to the center of the screen (0 0).
homeReturn = The distance turtle moved.

clearScreenCommand = CLEARSCREEN | CS
clearScreenDescription = Erases turtle's trails and sends it to the home position.
clearScreenReturn = The distance turtle moved.

# QUERIES

xcorQuery = XCOR
xcorResult = The turtle's X coordinate from the center of the screen.

ycorQuery = YCOR
ycorResult = The turtle's Y coordinate from the center of the screen.

headingQuery = HEADING
headingResult = The turtle's heading in degrees.

penDownQuery = PENDOWN? | PENDOWNP
penDownResult =	1 if turtle's pen is down, 0 if it is up.

showingQuery = SHOWING? | SHOWINGP
showingResult = 1 if turtle is showing, 0 if it is hiding.

# MATH OPERATIONS

sumCommand = SUM {expr1} {expr2} | + {expr1} {expr2}
sumResult = Sum of the values of {expr1} and {expr2}.

diffCommand = DIFFERENCE {expr1} {expr2} | - {expr1} {expr2}
diffResult = Difference of the values of {expr1} and {expr2}.

prodCommand = PRODUCT {expr1} {expr2} | * {expr1} {expr2}
prodResult = Product of the values of {expr1} and {expr2}.

quotientCommand = QUOTIENT {expr1} {expr2} | / {expr1} {expr2}
quotientResult = Quotient of the values of {expr1} and {expr2}.

remainderCommand = REMAINDER {expr1} {expr2} | % {expr1} {expr2}
remainderResult = Remainder on dividing the values of {expr1} by {expr2}.

minusCommand = MINUS {expr} | ~ {expr}
minusResult = Negative of the values of {expr}.

randomCommand = RANDOM {max}
randomResult = Random non-negative number strictly less than {max}.

sinCommand = SIN {degrees}
sinResult = Sine of {degrees}.

cosCommand = COS {degrees}
cosResult = Cosine of {degrees}.

tanCommand = TAN {degrees}
tanResult = Tangent of {degrees}.

atanCommand = ATAN {degrees}
atanResult = Arctangent of {degrees}.

logCommand = LOG {expr}
logResult = Natural log of {expr}.

powCommand = POW {base} {exponent}
powResult = {base} raised to the power of the {exponent}.

piCommand = PI
piResult = The number Pi.

# BOOLEAN OPERATIONS

lessCommand = LESS? {expr1} {expr2} | LESSP {expr1} {expr2}
lessResult = 1 if the value of {expr1} is strictly less than the value of {expr2}, otherwise 0.

greaterCommand = GREATER? {expr1} {expr2} | GREATERP {expr1} {expr2}
greaterResult = 1 if the value of {expr1} is strictly greater than the value of {expr2}, otherwise 0.

equalCommand = EQUAL? {expr1} {expr2} | EQUALP {expr1} {expr2}
equalResult = 1 if the value of {expr1} and the value of {expr2} are equal, otherwise 0.

notequalCommand = NOTEQUAL? {expr1} {expr2} | NOTEQUALP {expr1} {expr2}
notequalResult = 1 if the value of {expr1} and the value of {expr2} are not equal, otherwise 0.

andCommand = AND {test1} {test2}
andResult = 1 if {test1} and {test2} are non-zero, otherwise 0.

orCommand = OR {test1} test2
orResult =  1 if {test1} or {test2} are non-zero, otherwise 0.

notCommand = NOT {test}
notResult = 1 if {test} is 0 and 0 if {test} is non-zero.

# VARIABLES, CONTROL STRUCTURES, USER-DEFINED COMMANDS
makeKeyword = MAKE {variable} {expr} | SET {variable} {expr}
makeDescription = Assigns the value of {expr} to variable, creating the variable if necessary.
makeResult = {expr}
makeNotes =

repeatKeyword = REPEAT {expr} [ {command(s)} ]|
repeatDescription = Runs {command(s)} given in the list the value of {expr} number of times.\n
repeatResult = The value of the final command executed (or 0 if no commands are executed).
repeatNotes = The value of the current iteration, starting at 1, is automatically assigned to the variable {:repcount} so that it can be accessed by the command(s)

dotTimesKeyword = DOTIMES [ {variable} {limit} ] | [ {command(s)} ]
dotTimesDescription = Runs {command(s)} for each value specified in the range, i.e., from (1 - limit) inclusive.
dotTimesResult = The value of the final command executed (or 0 if no commands are executed).
dotTimesNotes = {variable} is assigned to each succeeding value so that it can be accessed by the command(s)

forKeyword = FOR [ {variable} {start} {end} {increment} ] [ {command(s)} ]
forDescription = Runs command(s) for each value specified in the range, i.e., from (start - end), going by increment.
forResult = The value of the final command executed (or 0 if no commands are executed).
forNotes = {variable} is assigned to each succeeding value so that it can be accessed by the command(s).

ifKeyword = IF {expr} [ {command(s)} ]
ifDescription = If {expr} is not 0, runs the {command(s)} given in the list.
ifResult = The value of the final command executed (or 0 if no commands are executed).
ifNotes =

ifElseKeyword = IFELSE {expr} [ {trueCommand(s)} ] [ {falseCommand(s)} ]
ifElseDescription = If {expr} is not 0, runs the {trueCommands} given in the first list, otherwise runs the {falseCommands} given in the second list.
ifElseResult = The value of the final command executed (or 0 if no commands are executed).
ifElseNotes =

toKeyword = TO {commandName} [ {variable(s)} ] [ {command(s)} ]
toDescription = Assigns command(s) given in the second list to commandName using parameters given in first list as variables.\
   When {commandName} is used later in a program, any given values are assigned to {variables} that can be accessed when the command list is run and the value of the final command executed is returned (or 0 if no commands are executed).
toResult = 1 if command is successfully defined, otherwise 0
toNotes =