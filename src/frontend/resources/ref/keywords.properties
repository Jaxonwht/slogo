# VARIABLES, CONTROL STRUCTURES, USER-DEFINED COMMANDS
name = Keywords
suffix = Keyword,Description,Returns,Notes

makeKeyword = MAKE {variable} {expr}\nSET {variable} {expr}
makeDescription = Assigns the value of {expr} to variable, creating the variable if necessary.
makeReturns = {expr}
makeNotes =

repeatKeyword = REPEAT {expr} [ {command(s)} ]|
repeatDescription = Runs {command(s)} given in the list the value of {expr} number of times.\n
repeatReturns = The value of the final command executed (or 0 if no commands are executed).
repeatNotes = The value of the current iteration, starting at 1, is automatically assigned to the variable {:repcount} so that it can be accessed by the command(s)

doTimesKeyword = DOTIMES [ {variable} {limit} ] [ {command(s)} ]
doTimesDescription = Runs {command(s)} for each value specified in the range, i.e., from (1 - limit) inclusive.
doTimesReturns = The value of the final command executed (or 0 if no commands are executed).
doTimesNotes = {variable} is assigned to each succeeding value so that it can be accessed by the command(s)

forKeyword = FOR [ {variable} {start} {end} {increment} ] [ {command(s)} ]
forDescription = Runs command(s) for each value specified in the range, i.e., from (start - end), going by increment.
forReturns = The value of the final command executed (or 0 if no commands are executed).
forNotes = {variable} is assigned to each succeeding value so that it can be accessed by the command(s).

ifKeyword = IF {expr} [ {command(s)} ]
ifDescription = If {expr} is not 0, runs the {command(s)} given in the list.
ifReturns = The value of the final command executed (or 0 if no commands are executed).
ifNotes =

ifElseKeyword = IFELSE {expr} [ {trueCommand(s)} ] [ {falseCommand(s)} ]
ifElseDescription = If {expr} is not 0, runs the {trueCommands} given in the first list, otherwise runs the {falseCommands} given in the second list.
ifElseReturns = The value of the final command executed (or 0 if no commands are executed).
ifElseNotes =

toKeyword = TO {commandName} [ {variable(s)} ] [ {command(s)} ]
toDescription = Assigns command(s) given in the second list to commandName using parameters given in first list as variables.\
   When {commandName} is used later in a program, any given values are assigned to {variables} that can be accessed when the command list is run and the value of the final command executed is returned (or 0 if no commands are executed).
toReturns = 1 if command is successfully defined, otherwise 0
toNotes =
